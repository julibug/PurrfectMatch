<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - PurrfectMatch</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/PurrfectMatch.styles.css" asp-append-version="true" />
</head>
<body style="background-color: pink; color: #000;">
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <img src="~/images/Cute-Cat-icon.png" alt="Paw Icon" style="width: 30px; height: 30px; margin-right: 10px;" />
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">PurrfectMatch</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Cats" asp-action="Index">Kotki</a>
                        </li>
                        @if (User.IsInRole("Administrator"))
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Admin" asp-action="ManageUsers">Zarządzanie użytkownikami</a>
                            </li>
                        }
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Details">Konto</a>
                        </li>
                    </ul>
                    @if (User.Identity.IsAuthenticated && !User.IsInRole("Administrator"))
                    {
                        <div class="dropdown">
                            <button class="btn btn-secondary dropdown-toggle" type="button" id="notificationsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Powiadomienia <span id="notificationCount" class="badge bg-primary">0</span>
                            </button>
                            <ul id="notificationList" class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationsDropdown" style="max-height: 300px; overflow-y: auto;">
                                <li><span class="dropdown-item">Ładowanie...</span></li>
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - PurrfectMatch - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

<script>
document.addEventListener('DOMContentLoaded', async function () {
    const notificationCountElement = document.getElementById('notificationCount');

    try {
        // Pobranie liczby nieprzeczytanych powiadomień po załadowaniu strony
        const countResponse = await fetch('/Notification/GetUnreadNotificationsCount');
        const countData = await countResponse.json();
        
        // Zaktualizowanie liczby powiadomień
        notificationCountElement.textContent = countData.count;
    } catch (error) {
        console.error('Błąd podczas ładowania liczby nieprzeczytanych powiadomień:', error);
    }
});

document.getElementById('notificationsDropdown').addEventListener('click', async function () {
    const notificationList = document.getElementById('notificationList');
    notificationList.innerHTML = '<li><span class="dropdown-item">Ładowanie...</span></li>';

    try {
        const response = await fetch('/Notification/GetNotifications');
        const data = await response.json();

        if (data.length === 0) {
            notificationList.innerHTML = '<li><span class="dropdown-item">Brak nowych powiadomień</span></li>';
        } else {
            notificationList.innerHTML = '';
            data.forEach(notification => {
                notificationList.innerHTML += `
                    <li class="dropdown-item" id="notification-${notification.id}">
                        <span>${notification.message}</span>
                        <div style="font-size: 0.8em; color: gray;">${new Date(notification.createdAt).toLocaleString()}</div>
                        <button class="btn btn-sm btn-link text-success markAsReadBtn" data-id="${notification.id}">Oznacz jako przeczytane</button>
                    </li>
                `;
            });

            // Zaktualizowanie przycisków oznaczania jako przeczytane
            const markAsReadBtns = document.querySelectorAll('.markAsReadBtn');
            markAsReadBtns.forEach(button => {
                button.addEventListener('click', async function () {
                    const notificationId = button.getAttribute('data-id');
                    try {
                        const markAsReadResponse = await fetch(`/Notification/MarkAsRead?id=${notificationId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            }
                        });

                        if (markAsReadResponse.ok) {
                            // Po oznaczeniu jako przeczytane, odśwież całą stronę
                            location.reload(); // Odświeżenie strony
                        } else {
                            alert('Wystąpił problem podczas oznaczania powiadomienia.');
                        }
                    } catch (error) {
                        console.error('Błąd podczas oznaczania powiadomienia:', error);
                    }
                });
            });
        }
    } catch (error) {
        notificationList.innerHTML = '<li><span class="dropdown-item text-danger">Brak nowych powiadomień.</span></li>';
    }
});
</script>
